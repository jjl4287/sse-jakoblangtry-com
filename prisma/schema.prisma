generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Board {
  id        String    @id @default(cuid())
  title     String
  theme     String?
  columns   Column[]
  creator   User      @relation("BoardCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  pinned    Boolean   @default(false)
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   BoardMembership[] @relation("BoardMembers")
  labels    Label[]
  cards     Card[]
}

model Column {
  id        String    @id @default(cuid())
  title     String
  width     Int
  order     Int       @default(0)
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  cards     Card[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  labels      Label[]      @relation("CardLabels")
  dueDate     DateTime?
  assignees   User[]       @relation("CardAssignees")
  priority    Priority
  weight      Int?
  attachments Attachment[]
  comments    Comment[]
  column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  order       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  activityLogs ActivityLog[]

  @@index([columnId])
  @@index([boardId])
}

model Label {
  id    String  @id @default(cuid())
  name  String
  color String
  cards Card[]  @relation("CardLabels")
  board Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([cardId])
  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?   @db.Text
  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  accounts      Account[]
  sessions      Session[]
  
  createdBoards Board[] @relation("BoardCreator")

  assignedCards Card[] @relation("CardAssignees")

  comments Comment[]

  activityLogs ActivityLog[]

  boardMemberships BoardMembership[] @relation("UserMemberships")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  low
  medium
  high
}

// NextAuth models for persisting user sessions and accounts
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refreshToken") @db.Text
  access_token       String?  @map("accessToken") @db.Text
  expires_at         Int?     @map("expiresAt")
  token_type         String?  @map("tokenType")
  scope              String?  @db.Text
  id_token           String?  @map("idToken") @db.Text
  session_state      String?  @map("sessionState") @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model for Board Sharing
model BoardMembership {
  id        String   @id @default(cuid())
  board     Board    @relation("BoardMembers", fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  user      User     @relation("UserMemberships", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, userId])
}

// New model for ActivityLog
model ActivityLog {
  id           String   @id @default(cuid())
  actionType   String   // e.g., "CREATE_CARD", "ADD_LABEL", "CHANGE_ASSIGNEE"
  details      Json?    // Store additional information like old/new values, label name, etc.
  createdAt    DateTime @default(now())

  cardId       String
  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  userId       String?  // Optional: action might be by system or user might be deleted
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([cardId])
  @@index([userId])
} 