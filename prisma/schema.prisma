generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Board {
  id        String    @id @default(cuid())
  title     String
  theme     String?
  columns   Column[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  pinned    Boolean   @default(false)
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Column {
  id        String    @id @default(cuid())
  title     String
  width     Int
  order     Int       @default(0)
  board     Board     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  cards     Card[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Card {
  id          String       @id @default(cuid())
  title       String
  description String
  labels      Label[]      @relation("CardLabels")
  dueDate     DateTime?
  assignees   User[]       @relation("CardAssignees")
  priority    Priority
  attachments Attachment[]
  comments    Comment[]
  column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  order       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Label {
  id    String  @id @default(cuid())
  name  String
  color String
  cards Card[]  @relation("CardLabels")
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

model Comment {
  id        String   @id @default(cuid())
  author    String
  content   String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  image         String?
  emailVerified DateTime?
  hashedPassword String?
  resetToken     String?
  resetTokenExpiry DateTime?
  assignedCards Card[]   @relation("CardAssignees")
  boards        Board[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Priority {
  low
  medium
  high
}

// NextAuth models for persisting user sessions and accounts
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refreshToken")
  access_token       String?  @map("accessToken")
  expires_at         Int?     @map("expiresAt")
  token_type         String?  @map("tokenType")
  scope              String?
  id_token           String?  @map("idToken")
  session_state      String?  @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 