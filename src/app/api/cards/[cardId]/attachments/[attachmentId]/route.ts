import { NextResponse } from \'next/server\';\nimport prisma from \'~/lib/prisma\';\nimport { getServerSession } from \'next-auth/next\';\nimport { authOptions } from \'~/lib/auth/authOptions\';\nimport fs from \'fs/promises\';\nimport path from \'path\';\n\nexport async function DELETE(\n  request: Request, // Not used, but part of the signature\n  { params: paramsPromise }: { params: Promise<{ cardId: string, attachmentId: string }> }\n) {\n  const { cardId, attachmentId } = await paramsPromise;\n\n  const session = await getServerSession(authOptions);\n  if (!session?.user?.id) {\n    return NextResponse.json({ error: \'Unauthorized\' }, { status: 401 });\n  }\n  const userId = session.user.id;\n\n  try {\n    // 1. Authorization: Check if user can modify the card\n    const card = await prisma.card.findUnique({\n      where: { id: cardId },\n      select: { board: { select: { creatorId: true, members: { select: { userId: true } } } } },\n    });\n\n    if (!card) {\n      return NextResponse.json({ error: \'Card not found\' }, { status: 404 });\n    }\n\n    const isOwner = card.board.creatorId === userId;\n    const isMember = card.board.members.some(member => member.userId === userId);\n\n    if (!isOwner && !isMember) {\n      return NextResponse.json({ error: \'Forbidden\' }, { status: 403 });\n    }\n\n    // 2. Find the attachment to get its details (like URL for file deletion)\n    const attachmentToDelete = await prisma.attachment.findUnique({\n      where: { id: attachmentId, cardId: cardId }, // Ensure it belongs to the correct card\n    });\n\n    if (!attachmentToDelete) {\n      return NextResponse.json({ error: \'Attachment not found on this card\' }, { status: 404 });\n    }\n\n    // 3. Delete the attachment record from DB\n    await prisma.attachment.delete({\n      where: { id: attachmentId },\n    });\n\n    // 4. Delete the actual file from the filesystem\n    //    The URL stored is like \`/uploads/cards/[cardId]/[filename]\`\n    //    We need to convert this to a full server path.\n    const filePathOnServer = path.join(process.cwd(), \'public\', attachmentToDelete.url);\n    try {\n      await fs.unlink(filePathOnServer);\n    } catch (fileError: any) {\n      // Log if file deletion fails, but don\'t necessarily fail the whole request,\n      // as the DB record is more critical. Or, decide to make it an atomic failure.\n      console.error(`Failed to delete file ${filePathOnServer}:`, fileError);\n      // Optionally, re-create the attachment record if file deletion is critical and fails.\n      // For now, we\'ll proceed assuming DB deletion is the primary goal.\n    }\n    \n    // 5. Log activity\n    await prisma.activityLog.create({\n        data: {\n            actionType: \"DELETE_ATTACHMENT_FROM_CARD\",\n            cardId,\n            userId,\n            details: {\n                attachmentId: attachmentToDelete.id,\n                attachmentName: attachmentToDelete.name,\n                attachmentUrl: attachmentToDelete.url, // Log the URL of the deleted file\n            },\n        },\n    });\n\n    return NextResponse.json({ success: true, message: \'Attachment deleted\' });\n\n  } catch (error: unknown) {\n    console.error(`[API DELETE /api/cards/${cardId}/attachments/${attachmentId}] Error:`, error);\n    const message = error instanceof Error ? error.message : \'Failed to delete attachment\';\n    return NextResponse.json({ error: message }, { status: 500 });\n  }\n}\n 